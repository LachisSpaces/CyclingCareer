
local hx = require "scripts.hashes"
local stageDefinition = require "scripts.StageDefinition"
local stageSimulator = require "scripts.StageSimulator"

local _timePerStep = 137
local _stage_rowIndex_finishLine = 90

local _gridSize = vmath.vector3(4, 4, 0)
local _gridPosition = vmath.vector3(0, 0, 0)

local _cardSize = vmath.vector3(144, 196, 0)

local function card_getPosition(x, y)
	return vmath.vector3((x * _cardSize.x) - (_cardSize.x / 2), (y * _cardSize.y) - (_cardSize.y / 2), 0)
end

local function cards_buildPlayfield(self)
	-- fill the grid with cards 
	for gridRow = 1, _gridSize.y do
		local cardRow = {}
		for gridCol = 1, _gridSize.x do
			local cardInfo = self.stageRoute[gridRow][gridCol]
			local pos = _gridPosition + card_getPosition(gridCol, gridRow)
			local cardList = collectionfactory.create("#EventCardDeck", pos, nil, { [hash("/Card")] = cardInfo })  
			local card = cardList[hash("/Card")] -- this code works only because the factory creates a single collection
			cardInfo.objectUrl = msg.url(nil, card, "")
			cardInfo.object = card
			cardRow[gridCol] = cardInfo
		end
		self.gridCards[gridRow] = cardRow
	end
	-- show the hand cards
	local hand
	for handCol = 2, _gridSize.x do
		self.handcardIndex = self.handcardIndex + 1
		local cardInfo = self.handCardStack[self.handcardIndex]
		local pos = _gridPosition - vmath.vector3(0, 16, 0) + card_getPosition(handCol, 0)
		local cardList = collectionfactory.create("#EventCardDeck", pos, nil, { [hash("/Card")] = cardInfo })
		local card = cardList[hash("/Card")] -- this code works only because the factory creates a single collection
		cardInfo.objectUrl = msg.url(nil, card, "")
		cardInfo.gridColumn = handCol
		cardInfo.object = card
		self.handCards[handCol] = cardInfo
	end
end

local function card_positionreached(self, url, property)
	for gridRow = 1, _gridSize.y do
		local cardRow = self.gridCards[gridRow]
		for gridCol = 1, _gridSize.x do
			local cardInfo = cardRow[gridCol]
			if cardInfo.objectUrl == url then
				if cardInfo.status == hx.CardStatus_MovingTwice then
					cardInfo.status = hx.CardStatus_Moving
					go.set_position(vmath.vector3(0, 1136, 0), cardInfo.object)
					go.animate(cardInfo.object, "position", go.PLAYBACK_ONCE_FORWARD, cardInfo.newPosition, go.EASING_INQUAD, 0.15, 0, card_positionreached)
					msg.post(cardInfo.objectUrl, "eventcard - replace", cardInfo)
				elseif cardInfo.status == hx.CardStatus_Moving then
					cardInfo.status = hx.CardStatus_OK
				end
				return true 
			end
		end
	end
end

local function cards_moveForward(self)
	local row4 = self.gridCards[4]
	local row3 = self.gridCards[3]
	local row2 = self.gridCards[2]
	local row1 = self.gridCards[1]
	self.gridCards = {}
	self.gridCards[4] = row1
	self.gridCards[3] = row4
	self.gridCards[2] = row3
	self.gridCards[1] = row2
	for gridRow = 1, _gridSize.y do
		local cardRow = self.gridCards[gridRow]
		for gridCol = 1, _gridSize.x do
			local cardInfo = cardRow[gridCol]
			local newPosition = _gridPosition + card_getPosition(gridCol, gridRow)
			if gridRow == _gridSize.y then
				-- this is the top row >> replace it
				local rowIndexTop = self.stage_rowIndex + (_gridSize.y - 1)
				local newCardInfo = self.stageRoute[rowIndexTop][gridCol]
				newCardInfo.objectUrl = cardInfo.objectUrl
				newCardInfo.object = cardInfo.object
				newCardInfo.newPosition = newPosition
				newCardInfo.status = hx.CardStatus_MovingTwice
				self.gridCards[gridRow][gridCol] = newCardInfo
				local pos = _gridPosition + vmath.vector3(_cardSize.x * (_gridSize.x + 1), 0, 0)
				go.animate(newCardInfo.object, "position", go.PLAYBACK_ONCE_FORWARD, pos, go.EASING_INQUAD, 0.15, 0, card_positionreached)
			else
				-- any other row
				cardInfo.status = hx.CardStatus_Moving
				go.animate(cardInfo.object, "position", go.PLAYBACK_ONCE_FORWARD, newPosition, go.EASING_INOUTCUBIC, 0.3, 0, card_positionreached)
			end
		end
	end
end

local function resultcard_refresh(self)
	local overallSeconds = self.stageProperties.overall_seconds + self.stage_seconds
	local overallSprintPoints = self.stageProperties.overall_sprintPoints + self.stage_sprintPoints 
	local overallMountainPoints = self.stageProperties.overall_mountainPoints + self.stage_mountainPoints
	msg.post(self.resultCardUrl, "resultcard - update", { seconds = overallSeconds, sprintPoints = overallSprintPoints, mountainPoints = overallMountainPoints } )
end

function init(self)
	-- msg.post(self.mainGuiUrl, "actual_stage - completed", { stageNumber = 13 } )
	-- some constant values
	self.playerCardUrl = msg.url("Stage", "/PlayerCard/Card", "")
	self.resultCardUrl = msg.url("Stage", "/ResultCard/Card", "")
	self.cyclistIcon = msg.url("Stage", "/StageProfile/CyclistIcon", "")
	self.stageProfile = msg.url("Stage", "/StageProfile/StageProfile", "")
	self.guiUrl = msg.url("Stage", "/UserInterface", "StageScene")
	self.mainGuiUrl = msg.url("main:/UserInterface#MainMenu")
	-- variable initialization
	self.stageStatus = hx.StageStatus_PreInitialization
	self.gridCards = {}
	self.handCards = {}
	self.handCardStack = {}
	self.stage_rowIndex = -1
	self.stageProperties = {}
	self.stage_seconds = 0/0
	self.stage_sprintPoints = 0/0
	self.stage_mountainPoints = 0/0
	self.playerCardPosition = vmath.vector3(4, 0, 0) 
	-- hide the result card (because the player card lies there for the moment)
	msg.post(self.resultCardUrl, "resultcard - hide")
	-- calculate the position of the grid
	local playfieldPosition = go.get_position()
	local gridPosition = go.get_position("CardGrid")
	local gridShift = vmath.vector3(_cardSize.x * (_gridSize.x / 2), _cardSize.y * (_gridSize.y / 2), _cardSize.z) -- only works because each cell in the grid is the same size as the card
	_gridPosition = playfieldPosition + gridPosition - gridShift
	-- request the initial values 
	msg.post("main:/SceneLoader#SceneLoader", "stage_initialisation - need_initial_values")
	-- acquire input 
	msg.post(".", "acquire_input_focus")
end

function final(self)
	msg.post(".", "release_input_focus")
end

function on_message(self, message_id, message, sender)
--	print_message("CardControler", message_id, message)

	if message_id == hash("stage_initialisation - initial_values") then
		-- the stage should be initialized (intial values are in the message)
		self.stageProperties = message.stageProperties
--		print_table(self.stageProperties)
		self.stage_seconds = 0
		self.stage_sprintPoints = 0
		self.stage_mountainPoints = 0
		self.stageRoute = stageDefinition.stage_getRoute(self.stageProperties, _stage_rowIndex_finishLine, _gridSize)
		self.handCardStack = stageDefinition.hand_getCards(0/0, 6)
		self.handcardIndex = 0
		cards_buildPlayfield(self)
		self.stage_rowIndex = 1
		self.stageStatus = hx.StageStatus_Running
		msg.post(self.stageProfile, "stageprofile - show", self.stageProperties)
		--stageSimulator.simulate(self.stageRoute, _stage_rowIndex_finishLine, _gridSize.x)

	elseif message_id == hash("collecting_event_card - playercard_stats_insufficient") then
		-- the player stats are insufficient to collect the event card (info about event card in message)
		-- !! Hinweis anzeigen, warum es nicht weitergeht !!

	elseif message_id == hash("collecting_event_card - collected") then
		-- the event card has been collected (info about event card in message)
		local cardInfo = message 
		cardInfo.status = hx.CardStatus_Hidden
		msg.post(cardInfo.objectUrl, "eventcard - hide")
		
		if cardInfo.cardpool == hx.CardPool_Handcard then
			-- the event card was collected from the hand 
			if self.handcardIndex < #self.handCardStack then
				self.handcardIndex = self.handcardIndex + 1
				local newCardInfo = self.handCardStack[self.handcardIndex]
				newCardInfo.objectUrl = cardInfo.objectUrl
				newCardInfo.object = cardInfo.object
				newCardInfo.gridColumn = cardInfo.gridColumn
				self.handCards[newCardInfo.gridColumn] = newCardInfo
				msg.post(cardInfo.objectUrl, "eventcard - replace", newCardInfo)
			else
				self.handCards[cardInfo.gridColumn] = cardInfo
			end

		else
			-- the event card was collected from the grid
			if self.playerCardPosition.y == 0 then
				-- the player card is in the starting position still
				self.playerCardPosition.y = 1
				msg.post(self.resultCardUrl, "resultcard - show")
			else
				-- the player card is on the grid already
				cards_moveForward(self)
			end
			-- advance on the stage 
			self.stage_rowIndex = self.stage_rowIndex + 1
			msg.post(self.cyclistIcon, "cyclisticon - move", { progress = self.stage_rowIndex / _stage_rowIndex_finishLine })
			if self.stage_rowIndex > _stage_rowIndex_finishLine then
				self.stageStatus = hx.StageStatus_Stopped
				if self.stageProperties.complete == true then
					-- the stage has been completed before
					if self.stageProperties.stage_sprintPoints == self.stage_sprintPoints and self.stageProperties.stage_mountainPoints == self.stage_mountainPoints and self.stageProperties.stage_seconds == self.stage_seconds then
						msg.post(self.guiUrl, "show_info - stage_completed_no_improvement")
					elseif self.stageProperties.stage_sprintPoints > self.stage_sprintPoints or self.stageProperties.stage_mountainPoints > self.stage_mountainPoints or self.stageProperties.stage_seconds < self.stage_seconds then
						msg.post(self.guiUrl, "show_info - stage_completed_no_improvement")
					else
						self.stageProperties.stage_seconds = self.stage_seconds
						self.stageProperties.stage_sprintPoints = self.stage_sprintPoints
						self.stageProperties.stage_mountainPoints = self.stage_mountainPoints
						msg.post(self.guiUrl, "show_info - stage_completed_with_improvement")
					end
				else
					-- the stage has not been completed before
					self.stageProperties.complete = true
					self.stageProperties.stage_seconds = self.stage_seconds
					self.stageProperties.stage_sprintPoints = self.stage_sprintPoints
					self.stageProperties.stage_mountainPoints = self.stage_mountainPoints
					msg.post(self.guiUrl, "show_info - stage_completed_firstresult")
				end
				msg.post(self.mainGuiUrl, "actual_stage - terminated", self.stageProperties)
			end
			-- advance time
			self.stage_seconds = self.stage_seconds + _timePerStep
			resultcard_refresh(self)
			-- Move player card
			self.playerCardPosition.x = cardInfo.gridColumn
			local pos = _gridPosition + card_getPosition(self.playerCardPosition.x, self.playerCardPosition.y)
			go.animate(self.playerCardUrl, "position", go.PLAYBACK_ONCE_FORWARD, pos, go.EASING_INOUTCUBIC, 0.4)
		end

	elseif message_id == hash("collecting_event_card - energy_empty") or message_id == hash("collecting_event_card - give_up") then
		self.stageStatus = hx.StageStatus_Stopped
		if self.stageProperties.complete == true then
			-- the stage has been completed before
			msg.post(self.guiUrl, "show_info - stage_incomplete_no_improvement")
		else
			msg.post(self.guiUrl, "show_info - stage_incomplete_no_result")
		end
		msg.post(self.mainGuiUrl, "actual_stage - terminated", self.stageProperties)

	elseif message_id == hash("collecting_event_card - won_bonus") then
		-- the event card gave bonus points 
		if message.sprintPoints ~= nil then
			self.stage_sprintPoints = self.stage_sprintPoints + message.sprintPoints
		end
		if message.mountainPoints ~= nil then
			self.stage_mountainPoints = self.stage_mountainPoints + message.mountainPoints
		end
		resultcard_refresh(self)

	elseif message_id == hash("collecting_event_card - time_bonus") then
		-- the event card has a time win or loss 
		if message.bonusType == hx.CardBonus_TimeWin then
			self.stage_seconds = self.stage_seconds - message.seconds - _timePerStep
		else
			self.stage_seconds = self.stage_seconds + message.seconds
		end
		resultcard_refresh(self)

	elseif message_id == hash("eventcard - hidden") then
		-- the event card has been hidden

	elseif message_id == hash("eventcard - replaced") then
		-- the event card has been replaced

	end
end

function on_input(self, action_id, action)
	if action_id == hx.Action_Touch and action.released then
		-- something has been clicked or touched
		if self.stageStatus == hx.StageStatus_Running then
			-- the stage is not over

			-- get the position of the click/touch within the card grid 
			local worldPosition = render_calculate_screen_to_world(action.screen_x, action.screen_y)
			local gridCol = math.ceil((worldPosition.x - _gridPosition.x) / _cardSize.x)
			local gridRow = math.ceil((worldPosition.y - _gridPosition.y) / _cardSize.y)
			--print(gridCol .. " / " .. gridRow)

			if gridCol >= 1 and gridCol <= _gridSize.x then
				-- vertically the touch position is within the grid
				
				if gridRow <= 0 then
					-- horizontally the touch position is below the grid >> we assume it is a hand card because there is nothing else 
					local selectedCardInfo = self.handCards[gridCol]
					if selectedCardInfo ~= nil then
						-- a card exists at the touch position
						if selectedCardInfo.status ~= hx.CardStatus_Hidden then
							-- the card is not hidden
							msg.post(self.playerCardUrl, "collecting_event_card - try_to_collect", selectedCardInfo)
						end
					end

				elseif gridRow == self.playerCardPosition.y + 1 then
					-- horizontally the touch position is exactly 1 row above the player card
					if self.playerCardPosition.y == 0 or ((gridCol >= (self.playerCardPosition.x - 1)) and (gridCol <= self.playerCardPosition.x + 1)) then
						-- the player card is in the starting row OR the touch position is in the same or a neighbouring colum
						local selectedCardInfo = self.gridCards[gridRow][gridCol]
						if selectedCardInfo ~= nil then
							-- card information exist for this position
							if selectedCardInfo.object ~= nil then  
								-- a card exists at the touch position
								if selectedCardInfo.status == hx.CardStatus_OK then
									-- the card is ready
									msg.post(self.playerCardUrl, "collecting_event_card - try_to_collect", selectedCardInfo)
								else
									-- the event card cannot be collected (at the moment) 
								end
							end
						end
					else
						-- the touch position is over any allowed card 
						-- it needs to be a neighbouring card above the player or any card from the hand
					end
				end
			end
		end
	end
end